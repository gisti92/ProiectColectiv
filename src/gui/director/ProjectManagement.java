/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.director;

import gui.director.models.ProjectsTableModel;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.director.Proiect;
import model.director.Proiect.ProjectType;
import persistence.DirectorRepositoryDB;

/**
 *
 * @author Artiom.Casapu
 */
public class ProjectManagement extends javax.swing.JFrame {

    private ProjectType projectType;

    /**
     * Creates new form ProjectManagement
     */
    public ProjectManagement(Proiect.ProjectType projectType) {
        initComponents();
        setLocationRelativeTo(null);
        this.projectType = projectType;

        setTitle(projectType.toString());
        titleLabel.setText(projectType.toString());
        try {
            refreshProjectsList(projectType);
        } catch (SQLException ex) {
            Logger.getLogger(ProjectManagement.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Eroare la incarcarea proiectelor", "Eroare", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        titleLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        projectsTable = new javax.swing.JTable();
        insertButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLabel.setText("Evenimente administrative:");

        projectsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(projectsTable);

        insertButton.setText("Adauga");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Modifica");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Sterge");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(titleLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(insertButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertButton)
                    .addComponent(updateButton)
                    .addComponent(deleteButton)
                    .addComponent(okButton))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed

        Proiect p = new Proiect();
        p.setTip(projectType);

        ProjectForm frm = new ProjectForm(this, true, p, false);
        frm.setVisible(true);

        if (frm.isOk()) {
            try {
                p.setStatus(Proiect.ProjectStatus.APROBAT);
                DirectorRepositoryDB.getInstance().addProject(p);
                refreshProjectsList(projectType);
            } catch (SQLException ex) {
                Logger.getLogger(ProjectManagement.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Eroare la salvarea proiectului", "Eroare", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_insertButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (!isSelected()) {

            JOptionPane.showMessageDialog(this, "Mai intai selectati un proiect", "Alert", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        int row = projectsTable.getSelectedRow();
        Proiect p = ((ProjectsTableModel) projectsTable.getModel()).getProject(row);

        ProjectForm frm = new ProjectForm(this, true, p, true);
        frm.setModal(true);
        frm.setVisible(true);

        if (frm.isOk()) {
            try {
                DirectorRepositoryDB.getInstance().updateProject(p);
                refreshProjectsList(projectType);
            } catch (SQLException ex) {
                Logger.getLogger(ProjectManagement.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Eroare la modificarea proiectului", "Eroare", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_updateButtonActionPerformed

    private boolean isSelected() {
        if (projectsTable.getSelectedRow() > -1) {
            return true;
        }
        return false;
    }

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (!isSelected()) {
            JOptionPane.showMessageDialog(this, "Mai intai selectati un proiect", "Alert", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        int row = projectsTable.getSelectedRow();
        Proiect p = ((ProjectsTableModel) projectsTable.getModel()).getProject(row);

        //TODO: are you sure dialog

        try {
            DirectorRepositoryDB.getInstance().deleteProject(p);
            refreshProjectsList(projectType);//TODO  replace last true with value got from constructor
        } catch (SQLException ex) {
            Logger.getLogger(ProjectManagement.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Eroare la stergerea proiectului", "Eroare", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_deleteButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton insertButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton okButton;
    private javax.swing.JTable projectsTable;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    private void refreshProjectsList(ProjectType projectType) throws SQLException {
        projectsTable.setModel(new ProjectsTableModel(DirectorRepositoryDB.getInstance().getProjects(projectType, false)));//TODO  replace last true with value got from constructor
    }
}
